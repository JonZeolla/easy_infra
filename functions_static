# Color code lookups
ERROR='\033[0;31m'
WARNING='\033[0;33m'
INFO='\033[0m'
DEFAULT='\033[0m'

function _feedback() {
  # Use the provided color code label
  color="${1}"
  case "${1}" in
    ERROR)
      # echo to stderr with the appropriate coloring, reset the color back to
      # the default when done
      >&2 echo -e "${!color}${1}:  ${2}${DEFAULT}" ;;
    WARNING)
      # echo to stderr with the appropriate coloring, reset the color back to
      # the default when done
      >&2 echo -e "${!color}${1}:  ${2}${DEFAULT}" ;;
    *)
      # echo to stdout with the appropriate coloring, reset the color back to
      # the default when done
      echo -e "${!color}${1}:  ${2}${DEFAULT}" ;;
  esac
}

function process_security_tool_exit_status() {
  # Store the provided exit status to return it at the end
  exit_status="${1}"
  security_tool="${2}"
  action="${3}"

  if [[ "${exit_status}" != 0 ]]; then
    _feedback ERROR "Failed ${security_tool} ${action}"
  else
    _feedback INFO "Passed ${security_tool} ${action}"
  fi

  # If the shell is not interactive ("i" is not in the $- variable), skip
  # multiple runs of the provided security tool by timestamping the touch file
  if [[ ! "${-}" =~ .*i.* ]]; then
    date +%s > "/${security_tool}_complete"
  fi

  return ${exit_status}
}


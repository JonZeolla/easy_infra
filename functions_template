function %FUNCTION_NAME%() {
  security_tool_upper=$(echo "%SECURITY_TOOL%" | tr '[:lower:]' '[:upper:]')
  security_tool_argument="--skip-%SECURITY_TOOL%"
  security_tool_env_var="SKIP_${security_tool_upper}"

  # If the "skip" argument was provided, skip the security scan
  if [[ "${1}" == "${security_tool_argument}" ]]; then
    _feedback WARNING "Skipping %SECURITY_TOOL% due to ${security_tool_argument} argument"
    shift
  # If the "skip" environment variable was set to true, skip the security scan
  elif [[ "${!security_tool_env_var:-false}" == "true" ]]; then
    _feedback WARNING "Skipping %SECURITY_TOOL% due to the ${security_tool_env_var} environment variable value"
  # If the security scan was already run successfully in an non-interactive
  # shell, don't run it again
  elif [[ -r "/%SECURITY_TOOL%_complete" ]]; then
    _feedback INFO "Skipping %SECURITY_TOOL% because it was already run on $(date -d @$(cat /%SECURITY_TOOL%_complete))"
  # Otherwise, run the security scan
  else
    %SECURITY_TOOL% %SECURITY_TOOL_ARGS% &>/%SECURITY_TOOL%_output
    process_security_tool_exit_status "${?}" "%SECURITY_TOOL%" "%SECURITY_TOOL_ACTION%"
    return=${?}
    if [[ ${return:-1} != 0 ]]; then
      cat /%SECURITY_TOOL%_output
      return ${return}
    fi
  fi

  # Run the command per a PATH lookup, after any easy_infra specific arguments are removed
  command "${FUNCNAME[0]}" "$@"
}


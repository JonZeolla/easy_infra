#####################################################################
# DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN #
#####################################################################

# Color code lookups
ERROR='\033[0;31m'
WARNING='\033[0;33m'
INFO='\033[0m'
DEFAULT='\033[0m'


function _feedback() {
  # Use the provided color code label
  color="${1}"
  case "${1}" in
    ERROR)
      # echo to stderr with the appropriate coloring, reset the color back to
      # the default when done
      >&2 echo -e "${!color}${1}:  ${2}${DEFAULT}" ;;
    WARNING)
      # echo to stderr with the appropriate coloring, reset the color back to
      # the default when done
      >&2 echo -e "${!color}${1}:  ${2}${DEFAULT}" ;;
    *)
      # echo to stdout with the appropriate coloring, reset the color back to
      # the default when done
      echo -e "${!color}${1}:  ${2}${DEFAULT}" ;;
  esac
}


function process_security_tool_exit_status() {
  # Store the provided exit status to return it at the end
  exit_status="${1}"
  security_tool="${2}"
  action="${3}"

  if [[ "${exit_status}" != 0 ]]; then
    _feedback ERROR "Failed ${security_tool} ${action}"
  else
    _feedback INFO "Passed ${security_tool} ${action}"
  fi

  # If the shell is not interactive ("i" is not in the $- variable), skip
  # multiple runs of the provided security tool by timestamping the touch file
  if [[ ! "${-}" =~ .*i.* ]]; then
    date +%s > "/${security_tool}_complete"
  fi

  return ${exit_status}
}


{# Loop through each provided command to be wrapped and make a single wrapper function for it -#}
{% for command in commands -%}
function {{ command }}() {
  # Methods to skip all security tools for {{ command }}
  if [[ "${1}" == "--disable-security" ]]; then
    _feedback WARNING "Skipping all security checks for {{ command }} due to the --disable-security argument"
    shift
    command "${FUNCNAME[0]}" "$@"
    return $?
  elif [[ "${DISABLE_SECURITY:-false}" == "true" ]]; then
    _feedback WARNING "Skipping all security checks for {{ command }} due to the DISABLE_SECURITY environment variable value"
    command "${FUNCNAME[0]}" "$@"
    return $?
  fi

{# For each command being wrapped, loop through each security tool and make tool-specific skips via env var/argument -#}
{%- for tool in commands[command] %}
  {{ tool }}_upper=$(echo "{{ tool }}" | tr '[:lower:]' '[:upper:]')
  {{ tool }}_argument="--skip-{{ tool }}"
  {# In order for us to use ${variable} in bash directly around a jinja2 variable it needs to be escaped -#}
  {{ tool }}_env_var="SKIP_{{ '${' }}{{ tool }}_upper}"

  # If the "skip" argument was provided, skip the security scan
  if [[ "${1}" == "{{ '${' }}{{ tool }}_argument}" ]]; then
    _feedback WARNING "Skipping {{ tool }} due to {{ '${' }}{{ tool }}_argument}"
    shift
  # If the "skip" environment variable was set to true, skip the security scan
  elif [[ "${!{{ tool }}_env_var:-false}" == "true" ]]; then
    _feedback WARNING "Skipping {{ tool }} due to the {{ '${' }}{{ tool }}_env_var} environment variable value"
  # If the security scan was already run successfully in an non-interactive
  # shell, don't run it again
  elif [[ -r "/{{ tool }}_complete" ]]; then
    _feedback INFO "Skipping {{ tool }} because it was already run on $(date -d @$(cat /{{ tool }}_complete))"
  # Otherwise, run the security tool
  else
    {{ commands[command][tool].command }} &>/{{ tool }}_output
    process_security_tool_exit_status "${?}" "{{ tool }}" "{{ commands[command][tool].description }}"
    return=${?}
    if [[ ${return:-1} != 0 ]]; then
      cat /{{ tool }}_output
      return ${return}
    fi
  fi
{% endfor %}
  # Run the command per a PATH lookup, after any easy_infra specific arguments are removed
  command "${FUNCNAME[0]}" "$@"
}

{% endfor -%}

#####################################################################
# DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN #
#####################################################################

# Color code lookups
ERROR='\033[0;31m'
WARNING='\033[0;33m'
INFO='\033[0m'
DEFAULT='\033[0m'


function _feedback() {
  # Use the provided color code label
  color="${1}"
  case "${1}" in
    ERROR)
      # echo to stderr with the appropriate coloring, reset the color back to
      # the default when done
      >&2 echo -e "${!color}${1}:  ${2}${DEFAULT}" ;;
    WARNING)
      # echo to stderr with the appropriate coloring, reset the color back to
      # the default when done
      >&2 echo -e "${!color}${1}:  ${2}${DEFAULT}" ;;
    *)
      # echo to stdout with the appropriate coloring, reset the color back to
      # the default when done
      echo -e "${!color}${1}:  ${2}${DEFAULT}" ;;
  esac
}


function process_tool_exit_status() {
  # Store the provided exit status to return it at the end
  exit_status="${1}"
  tool="${2}"
  action="${3}"

  if [[ "${exit_status}" != 0 ]]; then
    _feedback ERROR "Failed ${tool} ${action}"
  else
    _feedback INFO "Passed ${tool} ${action}"
  fi

  # If the shell is not interactive ("i" is not in the $- variable), skip
  # multiple runs of the provided security tool by timestamping the touch file
  if [[ ! "${-}" =~ .*i.* ]]; then
    date +%s > "/${tool}_complete"
  fi

  return ${exit_status}
}


function terraform() {
  ## Validate the input prior to running security tooling
  # Intentionally overwrite /terraform_output so later we only cat the
  # output of the command which failed
  command terraform init &>/terraform_output
  process_tool_exit_status "${?}" "terraform" "initialization"
  return=${?}
  if [[ ${return:-1} != 0 ]]; then
    cat /terraform_output
    return ${return}
  fi
  # Intentionally overwrite /terraform_output so later we only cat the
  # output of the command which failed
  command terraform validate &>/terraform_output
  process_tool_exit_status "${?}" "terraform" "validation"
  return=${?}
  if [[ ${return:-1} != 0 ]]; then
    cat /terraform_output
    return ${return}
  fi

  # Methods to skip all security tools for terraform
  if [[ "${1}" == "--disable-security" ]]; then
    _feedback WARNING "Skipping all security checks for terraform due to the --disable-security argument"
    shift
    command "${FUNCNAME[0]}" "$@"
    return $?
  elif [[ "${DISABLE_SECURITY:-false}" == "true" ]]; then
    _feedback WARNING "Skipping all security checks for terraform due to the DISABLE_SECURITY environment variable value"
    command "${FUNCNAME[0]}" "$@"
    return $?
  fi


  tfsec_upper=$(echo "tfsec" | tr '[:lower:]' '[:upper:]')
  tfsec_argument="--skip-tfsec"
  tfsec_env_var="SKIP_${tfsec_upper}"

  # If the "skip" argument was provided, skip the security scan
  if [[ "${1}" == "${tfsec_argument}" ]]; then
    _feedback WARNING "Skipping tfsec due to ${tfsec_argument}"
    shift
  # If the "skip" environment variable was set to true, skip the security scan
  elif [[ "${!tfsec_env_var:-false}" == "true" ]]; then
    _feedback WARNING "Skipping tfsec due to the ${tfsec_env_var} environment variable value"
  # If the security scan was already run successfully in an non-interactive
  # shell, don't run it again
  elif [[ -r "/tfsec_complete" ]]; then
    _feedback INFO "Skipping tfsec because it was already run on $(date -d @$(cat /tfsec_complete))"
  # Otherwise, run the security tool
  else
    tfsec . &>/tfsec_output
    process_tool_exit_status "${?}" "tfsec" "recursive scan"
    return=${?}
    if [[ ${return:-1} != 0 ]]; then
      cat /tfsec_output
      return ${return}
    fi
  fi

  # Run the command per a PATH lookup, after any easy_infra specific arguments are removed
  command "${FUNCNAME[0]}" "$@"
}


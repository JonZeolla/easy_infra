ERROR='\033[0;31m'
WARNING='\033[0;33m'
INFO='\033[0m'
DEFAULT='\033[0m'

function _feedback() {
  color="${1:-DEFAULT}"
  case "${1}" in
    ERROR)
      >&2 echo -e "${!color}${1}:  ${2}${DEFAULT}"
      return 1
      ;;
    WARNING)
      >&2 echo -e "${!color}${1}:  ${2}${DEFAULT}"
      return 0
      ;;
    *)
      echo -e "${!color}${1}:  ${2}${DEFAULT}"
      return 0
      ;;
  esac
}

function terraform() {
  if [[ "${1}" == "--skip-tfsec" ]]; then
    _feedback WARNING "Skipping tfsec due to --skip-tfsec argument"
    shift
  elif [[ "${SKIP_TFSEC:-false}" == "true" ]]; then
    _feedback WARNING "Skipping tfsec due to SKIP_TFSEC environment variable"
  elif [[ -r /tfsec_complete ]]; then
    _feedback INFO "Skipping tfsec because it was already run on $(date -d @$(cat /tfsec_complete))"
  else
    # Use the built-in tfsec recursive scan feature
    tfsec / || exitCode=$(_feedback ERROR "Failed tfsec recursive scan")

    if [[ "${?}" != 0 ]]; then
      return "${exitCode}"
    else
      date +%s > /tfsec_complete
    fi
  fi

  # Run the command per a PATH lookup, sans any easy_infra specific arguments
  command "${FUNCNAME[0]}" "$@"
}

